generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DataSource {
  id                String         @id @default(uuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now())
  lastSync          DateTime?
  dataSourceTypeId  String
  ownerEntityId     String
  ownerEntityType   EntityType
  secret            String         @unique
  externalId        String?        @unique
  isSyncing         Boolean        @default(false)
  isLiveSyncEnabled Boolean        @default(false)
  type              DataSourceType @relation(fields: [dataSourceTypeId], references: [id])

  googleDriveConnection GoogleDriveWebhookConnection?

  @@unique([ownerEntityId, dataSourceTypeId])
}

model GoogleDriveWebhookConnection {
  id            String     @id @default(uuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  connectionId  String     @unique
  resourceId    String     @unique
  creatorUserId String     @unique
  dataSourceId  String     @unique
  dataSource    DataSource @relation(fields: [dataSourceId], references: [id])
}

model DataSourceType {
  id                      String             @id @default(uuid())
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @default(now())
  name                    DataSourceTypeName @unique
  category                DataSourceCategory
  isLiveSyncAvailable     Boolean            @default(false)
  requiredCredentialTypes String[]
  linkedSources           DataSource[]
}

model Organization {
  id                  String          @id @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())
  planId              String
  isAccountActive     Boolean         @default(false)
  name                String
  plan                AccountPlan     @relation(fields: [planId], references: [id])
  organizationMembers User[]
  pendingInvites      UserInvite[]
  settings            EntitySettings?
}

model UserInvite {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  resentAt       DateTime?
  email          String
  firstName      String
  organizationId String
  isAccepted     Boolean        @default(false)
  type           UserInviteType
  organization   Organization   @relation(fields: [organizationId], references: [id])
}

model User {
  id               String          @id
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
  type             UserType
  planId           String?
  organizationId   String?
  email            String
  firstName        String
  lastName         String
  phoneNumber      String?
  stripeCustomerId String
  chats            Chat[]
  settings         EntitySettings?
  organization     Organization?   @relation(fields: [organizationId], references: [id])
  plan             AccountPlan?    @relation(fields: [planId], references: [id])
}

model EntitySettings {
  id                       String        @id @default(uuid())
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @default(now())
  newsletterNotification   Boolean       @default(true)
  usageNotification        Boolean       @default(true)
  chatCreativity           Int           @default(4)
  chatMinConfidence        Int           @default(8)
  chatTone                 ChatTone      @default(DEFAULT)
  baseInstructions         String?
  associatedUserId         String?       @unique
  associatedUser           User?         @relation(fields: [associatedUserId], references: [id])
  associatedOrganizationId String?       @unique
  associatedOrganization   Organization? @relation(fields: [associatedOrganizationId], references: [id])
}

model AccountPlan {
  id                  String           @id @default(uuid())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now())
  isActive            Boolean          @default(true)
  adHocUploadsEnabled Boolean
  dailyMessageQuota   Int?
  dataSyncInterval    DataSyncInterval
  integrationsEnabled Boolean
  maxDataSources      Int
  stripeProductId     String           @unique
  registeredOrgs      Organization[]
  registeredUsers     User[]
}

model Chat {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())
  userId             String
  title              String
  chatCreativity     Int?
  chatMinConfidence  Int?
  chatTone           ChatTone?
  baseInstructions   String?
  isArchived         Boolean       @default(false)
  chatType           ChatType
  associatedEntityId String
  user               User          @relation(fields: [userId], references: [id])
  gptMessages        ChatMessage[]
}

model ChatMessage {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  text            String
  isSystemMessage Boolean
  threadId        String
  chatId          String
  chat            Chat     @relation(fields: [chatId], references: [id])
}

enum EntityType {
  INDIVIDUAL
  ORGANIZATION
}

enum ChatTone {
  CASUAL
  DEFAULT
  PROFESSIONAL
}

enum DataSourceTypeName {
  SLACK
  NOTION
  GOOGLE_DRIVE
  FILE_UPLOAD
}

enum DataSourceCategory {
  COMMUNICATION
  PROJECT_MANAGEMENT
  NOTE_TAKING
  OTHER
}

enum DataSyncInterval {
  INSTANT
  DAILY
  WEEKLY
}

enum UserType {
  INDIVIDUAL
  ORGANIZATION_MEMBER
}

enum UserInviteType {
  MEMBER
  ADMIN
}

enum ChatType {
  SYSTEM
  SLACK
  MICROSOFT_TEAMS
}
