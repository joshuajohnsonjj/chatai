generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DataSource {
  id                   String           @id @default(uuid())
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @default(now())
  dataSourceTypeId     String
  type                 DataSourceType   @relation(fields: [dataSourceTypeId], references: [id])
  ownerEntityId        String
  ownerEntityType      EntityType
  secret               String
  refreshToken         String?
  externalId           String?          @unique
  isSyncing            Boolean          @default(false)
  lastSync             DateTime?
  nextScheduledSync    DateTime?
  mbStorageEstimate    Float            @default(0)
  selectedSyncInterval DataSyncInterval @default(WEEKLY)
  additionalConfig     Json?

  @@unique([ownerEntityId, dataSourceTypeId])
}

model DataSourceType {
  id                       String             @id @default(uuid())
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @default(now())
  name                     DataSourceTypeName @unique
  category                 DataSourceCategory
  isLiveSyncAvailable      Boolean            @default(false)
  isManualSyncAllowed      Boolean            @default(false)
  linkedSources            DataSource[]
  additionalConfigTemplate Json?
}

model Organization {
  id                  String          @id @default(uuid())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @default(now())
  planId              String
  isAccountActive     Boolean         @default(false)
  name                String
  plan                AccountPlan     @relation(fields: [planId], references: [id])
  organizationMembers User[]
  pendingInvites      UserInvite[]
  settings            EntitySettings?
}

model UserInvite {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  resentAt       DateTime?
  email          String
  firstName      String
  organizationId String
  isAccepted     Boolean        @default(false)
  type           UserInviteType
  organization   Organization   @relation(fields: [organizationId], references: [id])
}

model User {
  id               String          @id
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
  type             UserType
  planId           String?
  organizationId   String?
  email            String          @unique
  firstName        String
  lastName         String
  photoUrl         String?
  phoneNumber      String?
  stripeCustomerId String
  chats            Chat[]
  settings         EntitySettings?
  organization     Organization?   @relation(fields: [organizationId], references: [id])
  plan             AccountPlan?    @relation(fields: [planId], references: [id])
}

model EntitySettings {
  id                       String        @id @default(uuid())
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @default(now())
  newsletterNotification   Boolean       @default(true)
  usageNotification        Boolean       @default(true)
  chatCreativity           Int           @default(5)
  chatMinConfidence        Int           @default(5)
  chatTone                 ChatTone      @default(DEFAULT)
  baseInstructions         String?
  associatedUserId         String?       @unique
  associatedUser           User?         @relation(fields: [associatedUserId], references: [id])
  associatedOrganizationId String?       @unique
  associatedOrganization   Organization? @relation(fields: [associatedOrganizationId], references: [id])
}

model AccountPlan {
  id                  String           @id @default(uuid())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now())
  isActive            Boolean          @default(true)
  adHocUploadsEnabled Boolean
  dailyMessageQuota   Int?
  dailyQueryQuota     Int?
  dataSyncInterval    DataSyncInterval
  integrationsEnabled Boolean
  maxDataSources      Int?
  isAdfree            Boolean          @default(false)
  maxStorageMegaBytes Int              @default(256)
  stripeProductId     String           @unique
  registeredOrgs      Organization[]
  registeredUsers     User[]
}

model Chat {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  userId             String
  title              String
  chatCreativity     Int?
  chatMinConfidence  Int?
  chatTone           ChatTone?
  baseInstructions   String?
  isArchived         Boolean             @default(false)
  isFavorited        Boolean             @default(false)
  chatType           ChatType
  associatedEntityId String
  user               User                @relation(fields: [userId], references: [id])
  messages           ChatMessage[]
  threads            ChatMessageThread[]
}

model ChatMessageThread {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())
  messages  ChatMessage[]
  chatId    String
  chat      Chat          @relation(fields: [chatId], references: [id])
}

model ChatMessage {
  id              String                @id @default(uuid())
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @default(now())
  text            String
  isSystemMessage Boolean
  threadId        String
  thread          ChatMessageThread     @relation(fields: [threadId], references: [id])
  chatId          String
  chat            Chat                  @relation(fields: [chatId], references: [id])
  informers       ChatMessageInformer[]
}

model ChatMessageInformer {
  id         String      @id @default(uuid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  message    ChatMessage @relation(fields: [messageId], references: [id])
  messageId  String
  name       String
  url        String
  sourceName String
  confidence Float
}

model InternalAPIKey {
  key        String                @id
  isDisabled Boolean               @default(false)
  scopes     InternalAPIKeyScope[]
  createdAt  DateTime              @default(now())
}

enum InternalAPIKeyScope {
  ALL
  DATA_SOURCE
}

enum EntityType {
  INDIVIDUAL
  ORGANIZATION
}

enum ChatTone {
  CASUAL
  DEFAULT
  PROFESSIONAL
}

enum DataSourceTypeName {
  SLACK
  NOTION
  GOOGLE_DRIVE
  GMAIL
  FILE_UPLOAD
}

enum DataSourceCategory {
  COMMUNICATION
  PROJECT_MANAGEMENT
  NOTE_TAKING
  OTHER
}

enum DataSyncInterval {
  INSTANT
  SEMI_DAILY
  DAILY
  WEEKLY
}

enum UserType {
  INDIVIDUAL
  ORGANIZATION_MEMBER
}

enum UserInviteType {
  MEMBER
  ADMIN
}

enum ChatType {
  SYSTEM
  SLACK
  MICROSOFT_TEAMS
}
