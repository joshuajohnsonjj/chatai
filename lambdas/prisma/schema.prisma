generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DataSource {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now())
  lastSync         DateTime?
  dataSourceTypeId String
  ownerEntityId    String
  ownerEntityType  EntityType
  secret           String
  externalId       String?        @unique
  isSyncing        Boolean        @default(false)
  type             DataSourceType @relation(fields: [dataSourceTypeId], references: [id])

  @@unique([ownerEntityId, dataSourceTypeId])
}

model DataSourceType {
  id            String             @id @default(uuid())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @default(now())
  name          DataSourceTypeName @unique
  linkedSources DataSource[]
}

model Organization {
  id                  String       @id @default(uuid())
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now())
  planId              String
  isAccountActive     Boolean      @default(false)
  name                String
  plan                AccountPlan  @relation(fields: [planId], references: [id])
  organizationMembers User[]
  pendingInvites      UserInvite[]
}

model UserInvite {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  resentAt       DateTime?
  email          String
  firstName      String
  organizationId String
  isAccepted     Boolean        @default(false)
  type           UserInviteType
  organization   Organization   @relation(fields: [organizationId], references: [id])
}

model User {
  id               String        @id
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @default(now())
  type             UserType
  planId           String?
  organizationId   String?
  email            String
  firstName        String
  lastName         String
  phoneNumber      String?
  stripeCustomerId String?
  chats            Chat[]
  organization     Organization? @relation(fields: [organizationId], references: [id])
  plan             AccountPlan?  @relation(fields: [planId], references: [id])
}

model AccountPlan {
  id                  String           @id @default(uuid())
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @default(now())
  isActive            Boolean          @default(true)
  adHocUploadsEnabled Boolean
  dailyMessageQuota   Int?
  dataSyncInterval    DataSyncInterval
  integrationsEnabled Boolean
  maxDataSources      Int
  stripeProductId     String           @unique
  registeredOrgs      Organization[]
  registeredUsers     User[]
}

model Chat {
  id                 String        @id @default(uuid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @default(now())
  userId             String
  title              String
  chatType           ChatType
  associatedEntityId String
  user               User          @relation(fields: [userId], references: [id])
  gptMessages        ChatMessage[]
}

model ChatMessage {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  text            String
  isSystemMessage Boolean
  chatId          String
  chat            Chat     @relation(fields: [chatId], references: [id])
}

enum EntityType {
  INDIVIDUAL
  ORGANIZATION
}

enum DataSourceTypeName {
  SLACK
  NOTION
  GOOGLE_DRIVE
  FILE_UPLOAD
}

enum DataSyncInterval {
  INSTANT
  DAILY
  WEEKLY
}

enum UserType {
  INDIVIDUAL
  ORGANIZATION_MEMBER
}

enum UserInviteType {
  MEMBER
  ADMIN
}

enum ChatType {
  SYSTEM
  SLACK
  MICROSOFT_TEAMS
}
